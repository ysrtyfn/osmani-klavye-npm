import { MetinMukavelesi } from '@/osmaniKlavye/ihtisas/kalipMukaveleleri/MetinMukavelesi';
import { MetniKopyalaVazifesi, MetniTertipleVazifesi } from '@/osmaniKlavye/ihtisas/vazifeler';
import { Harf } from '@/osmaniKlavye/ihtisas/nevler/Harf';
import { latinidenOsmaniye } from '@/osmaniKlavye/nuve/latinidenOsmaniye';
import { Metin } from '@/osmaniKlavye/ihtisas/nevler/Metin';
import { MetinSahasÄ±MuaviniMukavelesi } from './MetinSahasÄ±MuaviniMukavelesi';

export function MetinSahasÄ±Muavini(metinMukavelesi: MetinMukavelesi): MetinSahasÄ±MuaviniMukavelesi {
    const metneHarfEkle = (harf: Harf, seÃ§iliKÄ±sÄ±mBaÅŸÄ±: number, seÃ§iliKÄ±sÄ±mSonu: number): [Metin, number] => {
        let harfEklenmiÅŸMetin = metinMukavelesi.alMetni();
        let karetHareketMiktarÄ± = 1;
        if (metinMukavelesi.alMetni().length === 0) {
            [harfEklenmiÅŸMetin, karetHareketMiktarÄ±] = metinMukavelesi.ekleHarf(harf);
        } else if (seÃ§iliKÄ±sÄ±mBaÅŸÄ± !== seÃ§iliKÄ±sÄ±mSonu) {
            [harfEklenmiÅŸMetin, karetHareketMiktarÄ±] = metinMukavelesi.ekleHarfiAraya(
                harf,
                seÃ§iliKÄ±sÄ±mBaÅŸÄ±,
                seÃ§iliKÄ±sÄ±mSonu
            );
        } else {
            [harfEklenmiÅŸMetin, karetHareketMiktarÄ±] = metinMukavelesi.ekleHarfiMevkiye(harf, seÃ§iliKÄ±sÄ±mBaÅŸÄ±);
        }
        return [harfEklenmiÅŸMetin, karetHareketMiktarÄ±];
    };

    const metneMetinEkle = (
        eklenecekMetin: Metin,
        seÃ§iliKÄ±sÄ±mBaÅŸÄ±: number,
        seÃ§iliKÄ±sÄ±mSonu: number
    ): [Metin, number] => {
        let metinEklenmiÅŸMetin = metinMukavelesi.alMetni();
        let karetHareketMiktarÄ± = eklenecekMetin.length;
        if (metinMukavelesi.alMetni().length === 0) {
            [metinEklenmiÅŸMetin, karetHareketMiktarÄ±] = metinMukavelesi.ekleMetin(eklenecekMetin);
            karetHareketMiktarÄ± = metinEklenmiÅŸMetin.length;
        } else if (seÃ§iliKÄ±sÄ±mBaÅŸÄ± !== seÃ§iliKÄ±sÄ±mSonu) {
            [metinEklenmiÅŸMetin, karetHareketMiktarÄ±] = metinMukavelesi.ekleMetniAraya(
                eklenecekMetin,
                seÃ§iliKÄ±sÄ±mBaÅŸÄ±,
                seÃ§iliKÄ±sÄ±mSonu
            );
        } else {
            [metinEklenmiÅŸMetin, karetHareketMiktarÄ±] = metinMukavelesi.ekleMetniMevkiye(
                eklenecekMetin,
                seÃ§iliKÄ±sÄ±mBaÅŸÄ±
            );
        }
        return [metinEklenmiÅŸMetin, karetHareketMiktarÄ±];
    };

    const metniSil = (): Metin => {
        const silinmiÅŸMetin = metinMukavelesi.silMetni();
        return silinmiÅŸMetin;
    };

    const metniKopyala = (): Metin => {
        const kopyalanmÄ±ÅŸMetin = MetniKopyalaVazifesi(metinMukavelesi.alMetni());
        return kopyalanmÄ±ÅŸMetin;
    };

    const metniTertiple = (): Metin => {
        const tertipliMetin = MetniTertipleVazifesi(metinMukavelesi.alMetni());
        return tertipliMetin;
    };

    const tuÅŸaBasÄ±lÄ±nca = async (
        hadise: KeyboardEvent,
        seÃ§iliKÄ±sÄ±mBaÅŸÄ±: number,
        seÃ§iliKÄ±sÄ±mSonu: number
    ): Promise<[Metin, number]> => {
        hadise.preventDefault(); // metinSahasÄ±nÄ±n onChange metoduna mani oluyor. Tekrar Ã§izme olmadÄ±ÄŸÄ± iÃ§in karet mevkisi deÄŸiÅŸmiyor.

        var tuÅŸÄ°smi = hadise.key;
        // console.log("ğŸš€ ~ file: MerkeziSahneMuavini.ts:63 ~ MerkeziSahneMuavini ~ tuÅŸÄ°smi:", tuÅŸÄ°smi);
        // var code = hadise.code;

        let mevcutMetin = metinMukavelesi.alMetni();
        if (tuÅŸÄ°smi === 'Backspace') {
            return metinMukavelesi.silHarfiMevkiden(seÃ§iliKÄ±sÄ±mBaÅŸÄ±, seÃ§iliKÄ±sÄ±mSonu);
        } else if (tuÅŸÄ°smi === 'Delete') {
            const harfAdedi = mevcutMetin.length;
            const silinmiÅŸMetin = metniSil();
            return [silinmiÅŸMetin, -harfAdedi];
        } else if (tuÅŸÄ°smi === 'ArrowRight') {
            return [mevcutMetin, -1];
        } else if (tuÅŸÄ°smi === 'ArrowLeft') {
            return [mevcutMetin, 1];
        } else if (tuÅŸÄ°smi === 'ArrowUp') {
            return [mevcutMetin, -10];
        } else if (tuÅŸÄ°smi === 'ArrowDown') {
            return [mevcutMetin, 10];
        } else if (hadise.ctrlKey && tuÅŸÄ°smi.toLowerCase() === 'v') {
            const ilaveMetin = await navigator.clipboard.readText();

            // TODO metni araya ilave edemiyoruz, CTRL tÄ±klanÄ±nca seÃ§ili kÄ±sÄ±m kaybediliyor
            return metneMetinEkle(ilaveMetin, seÃ§iliKÄ±sÄ±mBaÅŸÄ±, seÃ§iliKÄ±sÄ±mSonu);
        } else {
            const Ã¶ncekiHarf = metinMukavelesi.alSondakiHarfi();
            const harfOsmani = latinidenOsmaniye(tuÅŸÄ°smi, Ã¶ncekiHarf, hadise.ctrlKey, hadise.shiftKey, hadise.altKey);
            if (harfOsmani.length === 0) {
                return [mevcutMetin, 0];
            }
            return metneHarfEkle({ osmani: harfOsmani, latini: tuÅŸÄ°smi }, seÃ§iliKÄ±sÄ±mBaÅŸÄ±, seÃ§iliKÄ±sÄ±mSonu);
        }
    };

    const tuÅŸBÄ±rakÄ±lÄ±nca = (hadise: KeyboardEvent) => {
        hadise.preventDefault();

        // var tuÅŸÄ°smi = hadise.key;
        // var code = event.code;
    };

    const tuÅŸTÄ±klanÄ±nca = (harf: Harf, seÃ§iliKÄ±sÄ±mBaÅŸÄ±: number, seÃ§iliKÄ±sÄ±mSonu: number) => {
        return metneHarfEkle(harf, seÃ§iliKÄ±sÄ±mBaÅŸÄ±, seÃ§iliKÄ±sÄ±mSonu);
    };

    return {
        // metneHarfEkle,
        metniSil,
        metniKopyala,
        metniTertiple,
        tuÅŸaBasÄ±lÄ±nca,
        tuÅŸBÄ±rakÄ±lÄ±nca,
        tuÅŸTÄ±klanÄ±nca
    };
}
